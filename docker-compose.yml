# an ephemeral instance of ChRIS backend services for local development
#
# warning: /var/run/docker.sock is mounted into some services (notably pman)
#
# CUBE configuration based on
# https://raw.githubusercontent.com/FNNDSC/ChRIS_ultron_backEnd/master/docker-compose.yml
# commit 0ed91d7c3b3feaf9d68348623649a5d2e9918e34

version: '3.7'

services:
  chris:
    container_name: chris
    image: fnndsc/chris:1.1.0
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      - chris_db
      - swift
      - queue
      - chris_store
      - pfcon
    networks:
      - local
    env_file: secrets.env
  worker:
    image: fnndsc/chris:1.1.0
    entrypoint: ''
    command: celery -A core worker -c 4 -l info -Q main
    env_file: secrets.env
    depends_on:
      - chris_db
      - swift
      - queue
      - pfcon
    restart: on-failure
    networks:
      - local
  scheduler:
    image: fnndsc/chris:1.1.0
    entrypoint: ''
    command: celery -A core beat -l info --pidfile /home/localuser/celerybeat.pid --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file: secrets.env
    depends_on:
      - chris_db
      - swift
      - queue
    restart: on-failure
    networks:
      - local
  chris_db:
    image: mysql:5
    env_file: secrets.env
    restart: on-failure
    networks:
      - local
  queue:
    image: rabbitmq:3
    restart: on-failure
    networks:
      - local

  chris_store:
    container_name: chris_store
    image: fnndsc/chris_store
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DJANGO_ALLOWED_HOSTS=*
      - DJANGO_SECRET_KEY="alsonotverysecure"
      - DJANGO_CORS_ORIGIN_ALLOW_ALL=true
      - DJANGO_CORS_ORIGIN_WHITELIST=babymri.org
      - DJANGO_SECURE_PROXY_SSL_HEADER=
      - DJANGO_USE_X_FORWARDED_HOST=false
      - DATABASE_HOST=chris_store_db
      - DATABASE_PORT=3306
      - SWIFT_AUTH_URL=http://swift:8080/auth/v1.0
      - MYSQL_ROOT_PASSWORD=rootp
      - MYSQL_DATABASE=chris_store
      - MYSQL_USER=chris
      - MYSQL_PASSWORD=Chris1234
      - SWIFT_USERNAME=chris:chris1234
      - SWIFT_KEY=testing
      - SWIFT_CONTAINER_NAME=store_users
    ports:
      - "8010:8010"
    depends_on:
      - chris_store_db
      - swift
    networks:
      local:
        aliases:
          - chrisstore.local
  chris_store_db:
    image: mysql:5
    environment:
      - MYSQL_ROOT_PASSWORD=rootp
      - MYSQL_DATABASE=chris_store
      - MYSQL_USER=chris
      - MYSQL_PASSWORD=Chris1234
    networks:
      - local
    labels:
      name: "ChRIS_store MySQL Database"

  # swift, pfioh, and pman have hard-coded names inside pfcon by default
  # so network aliases are set to be swift_service, pfioh_service, pman_service
  swift:
    image: fnndsc/docker-swift-onlyone:latest
    init: true
    environment:
      - SWIFT_USERNAME=chris:chris1234
      - SWIFT_KEY=testing
    ports:
      - "127.0.0.1:8080:8080"
    networks:
      local:
        aliases:
          - swift_service

  pfcon:
    container_name: pfcon
    image: fnndsc/pfcon:2.4.0
    ports:
      - "127.0.0.1:5005:5005"
    depends_on:
      - swift
      - pman
      - pfioh
    networks:
      local:
        aliases:
          - pfcon.local
  pfioh:
    container_name: pfioh
    image: fnndsc/pfioh:3.0.2
    command: ["--forever", "--httpResponse", "--createDirsAsNeeded", "--storeBase", "/hostFS/storeBase"]
    volumes:
      - pfioh-remote:/hostFS/storeBase
    ports:
      - "127.0.0.1:5055:5055"
    networks:
      local:
        aliases:
          - pfioh_service

  pman:
    image: fnndsc/pman:2.2.2
    container_name: pman
    environment:
      - PMAN_DOCKER_VOLUME=pfioh-remote
    depends_on:
      - swarm-status
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - pfioh-remote:/hostFS/storeBase
    ports:
      - "127.0.0.1:5010:5010"
    networks:
      local:
        aliases:
          - pman_service

  chris_ui:
    image: fnndsc/chris_ui:latest
    ports:
      - "127.0.0.1:3000:3000"
  chris_store_ui:
    image: fnndsc/chris_store_ui:latest
    ports:
      - "127.0.0.1:3001:3000"

  # ====================
  # Provisioning
  # ====================

  # start docker swarm for pman
  swarm-status:
    image: docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./provision/swarm.sh:/entrypoint.sh
    entrypoint: /entrypoint.sh
  
  # wait for CUBE to come online
  cube-starting:
    image: curlimages/curl:latest
    container_name: cube-starting
    depends_on:
      - chris
    volumes:
      - ./provision/wait.sh:/wait.sh:ro
    entrypoint: /wait.sh
    command: ["chris:8000"]
    networks:
      - local
  
  cube-setup:
    image: docker
    container_name: cube-setup
    depends_on:
      - cube-starting
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./provision/setup.sh:/entrypoint.sh
    entrypoint: /entrypoint.sh

  # not actually backend services, but these container images are ran one-off by the backend
  # they are listed here so that they can be updated by
  #
  #     docker-compose pull
  noop-pfdcm:
    image: fnndsc/pfdcm
    entrypoint: /bin/true
  noop-swarm:
    image: fnndsc/swarm
    entrypoint: /bin/true

networks:
  local:

volumes:
  pfioh-remote:
    name: pfioh-remote
